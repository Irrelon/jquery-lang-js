// Type definitions for jquery-lang-js module 4.0.0
// Project: https://github.com/Irrelon/jquery-lang-js
// Definitions by: Claudio Schilling <https://github.com/rbfowler9lfc>

type JQueryAnySelectorInput = JQuery.htmlString | JQuery.Selector | Element[] | JQuery<unknown> | Element | JQuery.PlainObject<unknown>;

declare class Lang
{
	constructor();

	/**
	 * Initialise the library with the library options.
	 * @param {Object} options The options to init the library with.
	 * See the readme.md for the details of the options available.
	 */
	public init(options : Lang.InitOptions) : void;

	/**
	 * Loads a new language pack for the given language.
	 * @param {string} lang The language to load the pack for.
	 * @param {Function=} callback Optional callback when the file has loaded.
	 */
	public loadPack(lang : string, callback ?: (error : boolean) => void) : void;

	/**
	 * Call this to change the current language on the page.
	 * @param {String} lang The new two-letter language code to change to.
	 * @param {String=} selector Optional selector to find language-based
	 * elements for updating.
	 * @param {Function=} callback Optional callback function that will be
	 * called once the language change has been successfully processed. This
	 * is especially useful if you are using dynamic language pack loading
	 * since you will get a callback once it has been loaded and changed.
	 * Your callback will be passed three arguments, a boolean to denote if
	 * there was an error (true if error), the second will be the language
	 * you passed in the change call (the lang argument) and the third will
	 * be the selector used in the change update.
	 */
	public change<T extends JQueryAnySelectorInput>(lang : string, selector ?: T, callback ?: (error : boolean, newLang : string, selector : T) => void) : void;

	/**
	 * Defines a language pack that can be dynamically loaded and the
	 * path to use when doing so.
	 * @param {String} lang The language two-letter iso-code.
	 * @param {String} path The path to the language pack js file.
	 */
	public dynamic(lang : string, path : string) : void;

	/**
	 * Translates text from the default language into the passed language.
	 * @param {String} text The text to translate.
	 * @param {String} lang The two-letter language code to translate to.
	 * @returns {*}
	 */
	public translate(text : string, lang : string, data : string | number | unknown[] | Record<string, unknown>) : string;
}

export = Lang;

declare namespace Lang
{
	export interface CookiesOptions
	{
		/** Overrides the default cookie name to something else. The default is `"langCookie"`. */
		name ?: string;
		/** Sets the cookie expiry interval in days. The default is `365`. */
		expiry ?: number;
		/** Overrides the default cookie path to something else. The default is `"/"`. */
		path ?: string;
	}

	export interface InitOptions
	{
		/** The default language of the page / app. */
		defaultLang : string;

		/** The current language to set the page to. */
		currentLang ?: string;

		/** This object is only required if you want to override the default settings for cookies. */
		cookie ?: Lang.CookiesOptions;

		/**
		 * If true, cookies will override the "currentLang" option if the
		 * cookie is set. You usually shouldn't need to specify this option
		 * at all unless your JavaScript lang.init() method is being
		 * dynamically generated by PHP or other server-side processor.
		 */
		allowCookieOverride ?: true;
	}
}
